largedata <- read.table('semeion.data', header = FALSE)
?count.fields
?count
library(plyr)
V1 == 1
attach(largedata)
V1 == 1
?vector
V1[1]
zero <- vector(length = 256)
zero[10]
zero[100]
zero[257]
zero[256]
zero[0]
for (i in 1:256) {
one <- vector(length = 256)
ratio <- vector(length = 256)
for (i in 1:256) {
zero[i] = length(vector[V[i]==0])
}
zero[i] = length(vector[V[[i]]==0])
for (i in 1:256) {
zero[i] = length(vector[largedata[[i]]==0])
}
largedata[1]
for (i in 1:256) {
zero[i] = length(vector[largedata[i]==0])
}
largedata[1]==0
vector(largedata[1]==0)
vector[largedata[1]==0]
sum(largedata[1]==0)
for (i in 1:256) {
zero[i] = sum(largedata[i]==0)
one[i] = sum(largedata[i]==1)
ratio[i] = zero[i]/one[i]
}
plot(zero,col='red')
plot(zero,col='red',lines)
?plot
hist(zero)
plot(zero,col='red',type='l')
points(zero,col='blue')
plot(zero,col='red',type='l')
lines(one,col='red')
plot(zero,col='red',type='l')
lines(one,col='blue')
plot(zero,col='red',type='l',main='Frequency of 0 and 1 for each attribute',xlab='attribute',ylab='frequency')
lines(one,col='blue')
dev.copy2eps(file = 'freq.esp')
dev.off()
plot(zero,col='green',type='l',main='Ratio for frequencies of 0 and 1',xlab='attribute',ylab='ratio')
dev.copy2esp(file = 'ratio.eps')
dev.copy2eps(file = 'ratio.eps')
dev.off()
for (i in 1:256) {
for (i in 0:9) {
class <- vector(length = 10)
class <- vector(length = 10)
for (i in 0:9) {
class[i+1] = sum(largedata[i+257])
}
class
hist(class)
barplot(class)
barplot(class,main='Frequencies for each class',xlab='class',ylab='frequency')
?barplot
barplot(class,main='Frequencies for each class',xlab='class',ylab='frequency',names.arg=c(0,1,2,3,4,5,6,7,8,9))
dev.copy2eps('bclass.eps')
dev.copy2eps(file = 'bclass.eps')
sum(class)
save()
save.image()
q()
q()
ls()
class
ls()
rm(class,i,one,ratio,zero)
ls()
whole_data <- largedata[,1:256]
temp_label <- largedata[,257:266]
ncol(temp_label)
nrow(temp_label)
for (i in 1:1593)
for (i in 1:1593) {
for (j in 1:10) {
vector
?vector
whole_label <- temp_label[,1]
for (i in 1:1593) {
for (j in 1:10) {
if (temp_label[i,j] == 1) {
whole_label[i] = j
}
}
}
whole_label
ls()
rm(temp_label,i,j)
ls()
whole_pca <- princomp(whole_data,cor=FALSE)
summary(whole_pca)
plot(whole_pca$scores[,1],whole_pca$scores[,2])
plot(whole_pca2$scores[,1],whole_pca2$scores[,2], col = c("red","green","blue","black","grey","brown","orange")[whole_label],xlab="PC1",ylab="PC2",main="Projection data onto 2D space")
plot(whole_pca$scores[,1],whole_pca$scores[,2], col = c("red","green","blue","black","grey","brown","orange", "purple", "yellow", "navy")[whole_label],xlab="PC1",ylab="PC2",main="Projection data onto 2D space")
plot(whole_pca$scores[,1],whole_pca$scores[,2], col = c("navy","green","blue","black","grey","brown","orange", "purple", "yellow", "red")[whole_label],xlab="PC1",ylab="PC2",main="Projection data onto 2D space")
dev.copy2eps(file = "large_pca_projection_2D.eps")
dev.off()
q()
ls()
pcaclassify <- function(){}
fix(pcaclassify)
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
pcaclassify()
dev.copy2eps(file = "large_pca_LD12.eps")
dev.off()
fix(pcaclassify)
pcaclassify()
dev.copy2eps(file = "large_pca_LD34.eps")
fix(pcaclassify)
dev.off()
pcaclassify()
dev.copy2eps(file = "large_pca_LD56.eps")
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
kpcaclassify <- function(mykernel){}
fix(kpcaclassify)
kpcaclassify <- function(mykernel){}
fix(kpcaclassify)
fix(kpcaclassify)
library(kernlab)
rbfkernel <- rbfdot(sigma=0.01)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.001)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.02)
kpcaclassify(rbfkernel)
fix(kpcaclassify)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.05)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.1)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.05)
fix(kpcaclassify)
rbfkernel <- rbfdot(sigma=0.05)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.02)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.01)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.005)
kpcaclassify(rbfkernel)
fix(kpcaclassify)
rbfkernel <- rbfdot(sigma=0.01)
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.015)
kpcaclassify(rbfkernel)
fix(kpcaclassify)
kpcaclassify(rbfkernel)
q()
ls()
kpcaclassify(rbfkernel)
rbfkernel <- rbfdot(sigma=0.012)
kpcaclassify(rbfkernel)
fix(kpcaclassify)
kpcaclassify(rbfkernel)
fix(kpcaclassify)
kpcaclassify(rbfkernel)
dev.copy2eps(file = 'large_kpca_LD12.eps')
dev.off()
fix(kpcaclassify)
kpcaclassify(rbfkernel)
dev.copy2eps(file = 'large_kpca_LD34.eps')
dev.off()
fix(kpcaclassify)
kpcaclassify(rbfkernel)
pcaclassify()
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
fix(pcaclassify)
pcaclassify()
fix(pcaclassify)
pcaclassify()
rbfkernel
ls()
whole_label
 c("navy","green","blue","black","grey","brown","orange", "purple", "yellow", "red")[whole_label]
q()
ls()
library(kernlab)
polykernel <- polydot(degree = 2, scale=1,offset=1)
fix(kpcaclassify)
kpcaclassify(polykernel)
polykernel <- polydot(degree = 3, scale=1,offset=1)
kpcaclassify(polykernel)
fix(kpcaclassify)
fix(kpcaclassify)
polykernel <- polydot(degree = 2, scale=1,offset=1)
kpcaclassify(polykernel)
fix(kpcaclassify)
kpcaclassify(polykernel)
fix(kpcaclassify)
kpcaclassify(polykernel)
dev.copy2eps(file = "large_kpca_spectrum_poly.eps")
dev.off()
fix(kpcaclassify)
kpcaclassify(polykernel)
dev.copy2eps(file = "large_kpca_lda_poly_LD12.eps")
dev.off()
fix(kpcaclassify)
kpcaclassify(polykernel)
dev.copy2eps(file = "large_kpca_lda_poly_LD34.eps")
dev.off()
fix(kpcaclassify)
q()
ls()
svmclassify <- function(){}
fix(svmclassify)
fix(svmclassify)
fix(kpcaclassify)
fix(svmclassify)
svmclassify(1)
fix(svmclassify)
svmclassify(1)
svmclassify(0.5)
fix(svmclassify)
svmclassify(5)
svmclassify(10)
fix(svmclassify)
fix(1)
svmclassify(1)
svmclassify(10)
svmclassify(1000)
ls()
fix(svmclassify)
svmclassify(10)
svmclassify(1)
fix(svmclassify)
svmclassify(1)
svmclassify(5)
svmclassify(10)
svmclassify(20)
svmclassify(50)
q()
svmclassify(50)
svmclassify(1)
svmclassify(10)
dev.copy2eps(file="large_svm_linear.eps")
dev.off()
fix(svmclassify)
svmclassify(0.5,2)
fix(svmclassify)
svmclassify(10,2)
svmclassify(10,3)
fix(svmclassify)
svmclassify(5,2)
svmclassify(1000,2)
svmclassify(100000,2)
svmclassify(0.001,2)
svmclassify(0.00001,2)
svmclassify(0.000000001,2)
svmclassify(0.001,2)
svmclassify(0.0001,2)
svmclassify(0.00001,2)
svmclassify(0.000001,2)
svmclassify(0.00002,2)
svmclassify(0.00003,2)
svmclassify(0.00005,2)
svmclassify(0.00001,2)
svmclassify(0.000009,2)
svmclassify(0.00001,3)
svmclassify(0.00001,4)
svmclassify(0.00001,5)
for (i in 2:5)
for (i in 2:5) {
 for (j in 2:5) {
 print(i)
 print(j*0.00001)
 svmclassify(j*0.00001,i)
}
}
for (i in 2:5)
for (i in 2:5) {
 for (j in 2:5) {
 print(i)
 print(j*0.00001)
 print(svmclassify(j*0.00001,i))
}
}
svmclassify(0.00002,2)
svmclassify(0.00002,2)
dev.copy2eps(file="large_svm_polynomial.eps")
dev.off()
for (i in 2:5) {
 print(svmclassify(0.0001,i))
}
fix(svmclassify)
for (i in 1:5) {
 print(svmclassify(i*0.00001))
}
svmclassify(0.01)
svmclassify(0.001)
svmclassify(0.0001)
svmclassify(0.005)
svmclassify(0.008)
svmclassify(0.01)
svmclassify(0.003)
svmclassify(0.1)
svmclassify(0.01)
svmclassify(1)
svmclassify(0.008)
dev.copy2eps(file="large_svm_linear.eps")
dev.off()
fix(svmclassify)
svmclassify(0.008,1)
svmclassify(1,1)
svmclassify(100000,1)
svmclassify(100000,0.1)
svmclassify(0.001,0.1)
svmclassify(0.00000001,0.1)
svmclassify(0.0001,1000)
svmclassify(0.0001,10000000)
svmclassify(100000,10000000)
fix(svmclassify)
rbfkernel
svmclassify(100000,0.1)
svmclassify(100000,0.01)
svmclassify(1,0.01)
svmclassify(0.0001,0.01)
svmclassify(0.1,0.01)
svmclassify(0.5,0.01)
svmclassify(0.6,0.01)
svmclassify(0.8,0.01)
svmclassify(0.9,0.01)
svmclassify(10,0.01)
svmclassify(10,0.001)
svmclassify(1,0.0001)
svmclassify(1,0.0008)
svmclassify(1,0.0009)
svmclassify(1,0.001)
svmclassify(1,0.005)
svmclassify(1,0.01)
svmclassify(1,0.007)
svmclassify(1,0.1)
x <- vector(length=7)
x[1]<-0.0001
x[2]<-0.001
x[3]<-0.003
x[4]<-0.005
x[5]<-0.007
x[6]<-0.01
x[7]<-0.1
for (i in 1:7) {
print(x[i])
print(svmclassify(0.2,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(0.5,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(0.7,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(0.9,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(1,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(10,x[i]))
}
for (i in 1:7) {
print(x[i])
print(svmclassify(50,x[i]))
}
for (i in 1:7) {
print(svmclassify(100,x[i]))
}
for (i in 1:7) {
print(svmclassify(20,x[i]))
}
svmclassify(10,0.03)
svmclassify(10,0.003)
dev.copy2eps(file="large_svm_gaussian.eps")
dev.off()
q()
svmclassify2 <- svmclassify
fix(svmclassify2)
svmclassify2(0.008)
warnings()
ls()
whole_data$V1
fix(svmclassify2)
svmclassify2(0.008)
whole_label
fix(svmclassify2)
svmclassify2(0.008)
fix(svmclassify2)
svmclassify2(0.00002,2)
fix(svmclassify2)
svmclassify2(10,0.003)
svmclassify3 <- svmclassify2
fix(svmclassify3)
svmclassify3(10,0.003)
fix(svmclassify3)
svmclassify3(10,0.003)
ss <- svmclassify3(10,0.003)
length(ss)
sum(ss)
abs(ss)
fix(svmclassify3)
svmclassify3(10,0.003)
fix(svmclassify3)
svmclassify3(10,0.003)
fix(svmclassify3)
?hist
fix(svmclassify3)
svmclassify3(10,0.003)
dev.copy2eps(file="large_hist_best_gaussian.eps")
dev.off()
fix(svmclassify3)
svmclassify3(10,0.003)
dev.copy2eps(file="large_hist_worst_gaussian.eps")
dev.off()
save.image()
fix(svmclassify3)
svmclassify3(10,0.003)
fix(svmclassify3)
svmclassify3(10,0.003)
fix(svmclassify3)
svmclassify3(10,0.003)
dev.copy2eps(file="large_hist_gaussian.eps")
dev.off()
fix(svmclassify3)
svmclassify3(0.00002,2)
dev.copy2eps(file="large_hist_polynomial.eps")
dev.off()
fix(svmclassify3)
fix(svmclassify3)
svmclassify3(0.008)
fix(svmclassify3)
svmclassify3(0.008)
dev.copy2eps(file="large_hist_linear.eps")
dev.off()
fix(svmclassify3)
q()
